{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getRandomIndex","quotes","state","console","log","length","index","Math","floor","random","setState","quote","author","fetch","then","data","json","this","tweetURL","className","id","style","float","href","target","class","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOA4EeA,G,wDAvEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAuBRC,eAAe,WAAK,IACXC,EAAQ,EAAKC,MAAbD,OAEP,GADAE,QAAQC,IAAIH,GACTA,EAAOI,OAAO,EAAE,CACd,IAAMC,EAAOC,KAAKC,MAAMD,KAAKE,SAASR,EAAOI,QAChDF,QAAQC,IAAIE,GACZ,EAAKI,SAAS,CACZJ,MAAMA,MA7BR,EAAKJ,MAAM,CACTD,OAAO,CACL,CACEU,MAAM,GACNC,OAAO,KAGVN,MAAM,GATK,E,gEAaI,IAAD,OACjBO,MAhBK,yIAiBJC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MAAK,SAAAb,GACJ,EAAKS,SAAS,CACZT,UACE,EAAKD,qB,+BAgBN,IAAD,EACgBiB,KAAKf,MACrBS,EAFA,EACCV,OADD,EACQK,OAEdH,QAAQC,IAAIO,GACZ,IAAMO,EAAS,oCAAD,OAAsCP,EAAMA,MAA5C,YAAqDA,EAAMC,QAEzE,OACI,yBAAKO,UAAU,WACX,yBAAKA,UAAU,MAAMC,GAAG,aACpB,yBAAKD,UAAU,mBACRR,GAAW,yBAAKQ,UAAU,cACvB,uBAAGC,GAAG,QAAN,IAAeT,EAAMA,MAArB,KACA,0BAAMU,MAAO,CAACC,MAAM,SAAUF,GAAG,UAAjC,KAA6CT,EAAMC,SAG/D,yBAAKO,UAAU,UACb,yBAAKA,UAAU,WACd,uBAAGI,KAAML,EAAUE,GAAG,cAAcI,OAAO,UAAS,uBAAGC,MAAM,mBAA7D,WAED,6BACA,4BAAQC,QAAST,KAAKjB,eAAgBoB,GAAG,aAAzC,IAAsD,uBAAGK,MAAM,kBAA/D,2B,GAxDEE,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.5d2cace9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst API ='https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json';\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n      this.state={\n        quotes:[\n          {\n            quote:\"\",\n            author:\"\"\n          }\n        ] ,\n         index:0\n    }\n  }\n\n    componentDidMount(){\n      fetch(API)\n      .then(data=>data.json())\n      .then(quotes=>{\n        this.setState({\n          quotes\n        },  this.getRandomIndex);\n      })\n    }\n\n\n  getRandomIndex=()=>{\n    const {quotes}=this.state;\n    console.log(quotes)\n    if(quotes.length>0){\n         const index= Math.floor(Math.random()*quotes.length);\n      console.log(index)\n      this.setState({\n        index:index\n      })\n    }\n  }\n  render(){\n    const {quotes,index}= this.state;   \n    const quote=quotes[index];\n    console.log(quote)\n    const tweetURL= `https://twitter.com/intent/tweet?${quote.quote}-${quote.author}`;\n    \n    return(      \n        <div className=\"wrapper\">\n            <div className=\"box\" id=\"quote-box\">     \n                <div className=\"quote_container\">                     \n                      {quote &&   <div className=\"quote_text\" >\n                          <p id=\"text\"> {quote.quote} </p>\n                          <cite style={{float:'right'}} id=\"author\">- {quote.author}</cite> \n                         </div>                      \n                      }                               \n              <div className=\"soical\">\n                <div className=\"twitter\" >\n                 <a href={tweetURL} id=\"tweet-quote\" target=\"_blank\"><i class=\"fab fa-twitter\" ></i> tweet</a> \n                </div>\n                <div>\n                <button onClick={this.getRandomIndex} id=\"new-quote\"> <i class=\"fas fa-random\"></i>    Next Quote</button>\n                  </div>\n              </div>\n              </div>\n            </div>        \n        </div>        \n    );\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}